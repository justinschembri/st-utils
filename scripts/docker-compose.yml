services:
  python-app:
    build:
      context: ..
      dockerfile: Dockerfile
    depends_on:
      - web
      - database
    environment:
      - FROST_ENDPOINT=http://web:8080/FROST-Server/v1.1
      - CONTAINER_ENVIRONMENT=true
    command: ["uv", "run", "/app/src/sensorthings_utils/main.py"]

  web:
    image: fraunhoferiosb/frost-server:2.5.3
    volumes:
      - ../web:/usr/local/tomcat/webapps/st-utils
    environment:
      - serviceRootUrl=http://localhost:8080/FROST-Server
      - plugins_multiDatastream.enable=false
      - http_cors_enable=true
      - http_cors_allowed_origins=*
      - persistence_db_driver=org.postgresql.Driver
      - persistence_db_url=jdbc:postgresql://database:5432/sensorthings
      - persistence_db_username=sensorthings
      - persistence_db_password=ChangeMe
      - persistence_autoUpdateDatabase=true
      - auth_provider=de.fraunhofer.iosb.ilt.frostserver.auth.basic.BasicAuthProvider
      - auth_db_driver=org.postgresql.Driver
      - auth_db_url=jdbc:postgresql://database:5432/sensorthings
      - auth_db_username=sensorthings
      - auth_db_password=ChangeMe
      - auth_autoUpdateDatabase=true
      - auth.allowAnonymousRead=true
    ports:
      - 8080:8080
      - 1883:1883
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgis/postgis:16-3.4-alpine
    environment:
      - POSTGRES_DB=sensorthings
      - POSTGRES_USER=sensorthings
      - POSTGRES_PASSWORD=ChangeMe
    volumes:
      - postgis_volume:/var/lib/postgresql/data
      - ./init-db.sh:/usr/local/bin/st-utils-init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d sensorthings -U sensorthings"]
      interval: 2s
      timeout: 2s
      retries: 10
    entrypoint: ["/bin/sh", "-c", "chmod +x /usr/local/bin/st-utils-init-db.sh && /usr/local/bin/st-utils-init-db.sh"]

volumes:
  postgis_volume:
  python_app_volume: